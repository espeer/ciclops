/*
 * SimulationEditorDialog.java
 *
 * Created on March 10, 2004, 8:02 PM
 */

package za.ac.up.cs.cirg.ciclops.client;

import javax.swing.ListSelectionModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.tree.TreeSelectionModel;

import za.ac.up.cs.cirg.ciclops.model.ConfigBuilderModel;
import za.ac.up.cs.cirg.ciclops.model.ConfigBuilderNode;
import za.ac.up.cs.cirg.ciclops.services.SchemaValidationException;

/**
 *
 * @author  espeer
 */
public class ConfigBuilderDialog extends javax.swing.JDialog implements TableModelListener {
    
    /** Creates new form SimulationEditorDialog */
    public ConfigBuilderDialog(java.awt.Frame parent, boolean modal, String config) {
        super(parent, modal);
        
        this.config = config;
        
        try {
        	model = new ConfigBuilderModel(config);
        }
        catch (SchemaValidationException ex) {
        	throw new UnexpectedError(ex);
        }
        
        initComponents();
        overview.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        properties.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        configuration.setText(model.getConfiguration());
        properties.getColumnModel().getColumn(1).setCellEditor(new PropertyEditor(parent));
        properties.getColumnModel().getColumn(1).setCellRenderer(new PropertyRenderer());
        model.addTableModelListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        overview = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        properties = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        configuration = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        update = new javax.swing.JButton();

        setTitle("Configuration Builder");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(350, 350));
        overview.setModel(model);
        overview.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                overviewValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(overview);

        jSplitPane2.setLeftComponent(jScrollPane1);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(275, 200));
        properties.setModel(model);
        jScrollPane2.setViewportView(properties);

        jSplitPane2.setRightComponent(jScrollPane2);

        jSplitPane1.setLeftComponent(jSplitPane2);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(550, 550));
        configuration.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                deleteme(evt);
            }
        });

        jScrollPane3.setViewportView(configuration);

        jSplitPane1.setRightComponent(jScrollPane3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel1.add(ok);

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jPanel1.add(cancel);

        jPanel1.add(javax.swing.Box.createHorizontalGlue());
        update.setText("Update Model");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jPanel1.add(update);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void deleteme(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteme
        // Add your handling code here:
    }//GEN-LAST:event_deleteme

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
    	config = model.getConfiguration();
    	closeDialog(null);
    }//GEN-LAST:event_okActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
    	closeDialog(null);
    }//GEN-LAST:event_cancelActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        try {
            model.setConfiguration(configuration.getText());
        }
        catch (SchemaValidationException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_updateActionPerformed

    private void overviewValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_overviewValueChanged
        ConfigBuilderNode current = (ConfigBuilderNode) overview.getLastSelectedPathComponent();
        if (current != null) {
            model.setDisplayedNode(current);
            if (current.isProperty()) {
                properties.getSelectionModel().setSelectionInterval(current.getIndex(), current.getIndex());
            }
        }
       
    }//GEN-LAST:event_overviewValueChanged
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
    	model.dispose();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    public void tableChanged(TableModelEvent e) {
        configuration.setText(model.getConfiguration());
    }
    
    public String getConfiguration() {
    	return config;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JTextArea configuration;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton ok;
    private javax.swing.JTree overview;
    private javax.swing.JTable properties;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    private ConfigBuilderModel model;
    private String config;
}
